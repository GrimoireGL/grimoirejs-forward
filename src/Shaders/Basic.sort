@Technique default{
@Pass{
@BlendFunc(SRC_ALPHA,ONE_MINUS_SRC_ALPHA)
FS_PREC(mediump,float)

varying vec3 vNormal;
varying vec2 vTexCoord;
varying vec4 vPosition;

#ifdef ATTRIBUTE_COLOR_ENABLED
varying vec4 vColor;
#endif

#ifdef VS
  attribute vec3 position;
  attribute vec3 normal;
  #ifdef ATTRIBUTE_TEXCOORD_ENABLED
  attribute vec2 texCoord;
  #endif
  #ifdef ATTRIBUTE_COLOR_ENABLED
  @COLOR
  attribute vec4 color;
  #endif

  uniform mat4 _matPVM;
  uniform mat4 _matM;

  void main(){
    gl_Position = _matPVM * vec4(position,1.0);
    vNormal = normalize((_matM * vec4(normal,0.0)).xyz);
    vPosition = (_matM * vec4(position,1.0));
    #ifndef ATTRIBUTE_TEXCOORD_ENABLED
    vTexCoord = position.xy / 2.0 + vec2(0.5);
    #endif
    #ifdef ATTRIBUTE_TEXCOORD_ENABLED
    vTexCoord = texCoord;
    #endif
    #ifdef ATTRIBUTE_COLOR_ENABLED
    vColor = color;
    #endif
  }
#endif

#ifdef FS
  @CAMERA_POSITION
  uniform vec3 _cameraPosition;
  @{flag:"USE_TEXTURE"}
  uniform sampler2D texture;
  @{flag:"USE_ROUGHNESS_TEXTURE"}
  uniform sampler2D roughnessMap;

  @{default:"white",type:"color"}
  uniform vec4 albedo;

  @{default:1.0}
  uniform float roughness;

  @{default:0.99}
  uniform float metallic;

  @{default:"black",type:"color"}
  uniform vec3 emission;

  @import "forward-shading"

  const float c_minRoughness = 0.04;
  // TODO https://github.com/KhronosGroup/glTF-WebGL-PBR/issues/23

  void main(){
    vec3 dBaseColor = albedo.rgb;
    vec4 lastColor = vec4(0,0,0,albedo.a);
    #ifdef ATTRIBUTE_COLOR_ENABLED
    dBaseColor *= vColor.rgb;
    #endif
    #ifdef USE_TEXTURE
      vec4 texColor = texture2D(texture,vTexCoord);
      dBaseColor = texColor.rgb
      lastColor.a *= texColor.a;
    #endif
    float r = roughness;
    #ifdef USE_ROUGHNESS_TEXTURE
      r *= texture2D(roughnessMap,vTexCoord).r;
    #endif
    r = max(c_minRoughness,r);
    vec3 dielectricSpecular = vec3(0.04);
    vec3 diffuse = mix(dBaseColor.rgb * (1. - dielectricSpecular.r),vec3(0),metallic);
    vec3 f0 = mix(dielectricSpecular,dBaseColor.rgb,metallic);
    pbr_params param = pbr_params(diffuse,f0,r*r,r);
    lastColor.rgb += emission + shading(param,normalize(vNormal),vPosition.xyz/vPosition.w);
    gl_FragColor = lastColor;
    #ifdef ATTRIBUTE_COLOR_ENABLED
    gl_FragColor.a *= vColor.a;
    #endif
  }
#endif
}
}

@Technique hitarea{
  @Disable(BLEND)
  @Pass{
    FS_PREC(mediump,float)

    #ifdef VS
      attribute vec3 position;
      uniform mat4 _matPVM;

      void main(){
        gl_Position = _matPVM * vec4(position,1.0);
      }
    #endif

    #ifdef FS
      @MESH_INDEX
      uniform vec4 meshIndex;
      void main(){
        gl_FragColor = meshIndex;
      }
    #endif
  }
}

@Technique depth{
  @Pass{
    @CullFace(FRONT)
  FS_PREC(highp,float)

  varying vec4 vPos;

  vec3 EncodeFloatRGB( float v ) {
    vec3 enc = vec3(1.0, 255.0, 65025.0) * v;
    enc = fract(enc);
    enc -= enc.yzz * vec3(1.0/255.0,1.0/255.0,0.0);
    return enc;
  }

  float DecodeFloatRGB( vec3 rgb ) {
    return dot( rgb, vec3(1.0, 1./255.0, 1./65025.0) );
  }

  #ifdef VS
    attribute vec3 position;
    uniform mat4 _matPVM;
    void main(){
      gl_Position = vPos= _matPVM * vec4(position,1.0);
    }
  #endif

  #ifdef FS
    void main(){
      gl_FragColor.rgb = EncodeFloatRGB((vPos.z/vPos.w + 1.0)/2.0);
      gl_FragColor.a = 1.0;
    }
  #endif
  }
}
