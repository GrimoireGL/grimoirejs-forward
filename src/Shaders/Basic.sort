@Pass{
FS_PREC(mediump,float)

varying vec3 vNormal;
varying vec2 vTexCoord;
varying vec3 vPosition;

#ifdef VS
  attribute vec3 position;
  attribute vec3 normal;
  attribute vec2 texCoord;

  uniform mat4 _matPVM;
  uniform mat4 _matM;

  void main(){
    gl_Position = _matPVM * vec4(position,1.0);
    vNormal = normalize((_matM * vec4(normal,0.0)).xyz);
    vec4 posBase = (_matM * vec4(position,1.0));
    vPosition = posBase.xyz / posBase.w;
    vTexCoord = texCoord;
  }
#endif

#ifdef FS
  @CAMERA_POSITION
  uniform vec3 _cameraPosition;

  uniform sampler2D texture;

  @{default:"white",type:"color"}
  uniform vec4 albedo;

  @{default:0.1}
  uniform float roughness;

  @{default:0.99}
  uniform float refractive;

  @{default:"gray",type:"color"}
  uniform vec3 specular;

  @import "forward-shading"

  void main(){
    vec4 lastColor = vec4(0,0,0,albedo.a);
    vec3 dBaseColor = albedo.rgb * pow(texture2D(texture,vTexCoord).rgb,vec3(2.2));
    lastColor.rgb += shading(dBaseColor,vNormal,vPosition);
    gl_FragColor = lastColor;
    gl_FragColor.rgb = pow(gl_FragColor.rgb,vec3(1.0/2.2)); // Gamma correction
  }
#endif
}
