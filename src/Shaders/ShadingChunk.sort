#define GR_FORWARD_SHADING_ENABLED
@ReferMacro(DIR_LIGHT_COUNT,0)
@ReferMacro(POINT_LIGHT_COUNT,0)
@ReferMacro(SPOT_LIGHT_COUNT,0)
@ReferMacro(SHADOW_MAP_COUNT,0)
@ReferMacro(OES_TEXTURE_FLOAT,)

#if DIR_LIGHT_COUNT > 0
  #define USE_DIR_LIGHT
#endif

#if POINT_LIGHT_COUNT > 0
  #define USE_POINT_LIGHT
#endif

#if SPOT_LIGHT_COUNT > 0
  #define USE_SPOT_LIGHT
#endif

#if SHADOW_MAP_COUNT > 0
  #define USE_SHADOW_MAP
#endif

#ifdef USE_DIR_LIGHT
  @DIRECTIONAL_LIGHT_DIRECTIONS
  uniform vec3 _dLightDir[DIR_LIGHT_COUNT];

  @DIRECTIONAL_LIGHT_COLORS
  uniform vec3 _dLightColor[DIR_LIGHT_COUNT];

  @DIRECTIONAL_LIGHT_PARAMS
  uniform vec4 _dLightParams[DIR_LIGHT_COUNT];
#endif

#ifdef USE_POINT_LIGHT

  @POINT_LIGHT_POSITIONS
  uniform vec3 _pLightPosition[POINT_LIGHT_COUNT];

  @POINT_LIGHT_COLORS
  uniform vec3 _pLightColor[POINT_LIGHT_COUNT];

  @POINT_LIGHT_PARAMS
  uniform vec2 _pLightParam[POINT_LIGHT_COUNT];

#endif

#ifdef USE_SPOT_LIGHT

  @SPOT_LIGHT_POSITIONS
  uniform vec3 _sLightPosition[POINT_LIGHT_COUNT];

  @SPOT_LIGHT_DIRECTIONS
  uniform vec3 _sLightDir[POINT_LIGHT_COUNT];

  @SPOT_LIGHT_COLORS
  uniform vec3 _sLightColor[POINT_LIGHT_COUNT];

  @SPOT_LIGHT_PARAMS
  uniform vec4 _sLightParam[POINT_LIGHT_COUNT];
#endif

#ifdef USE_SHADOW_MAP
  @SHADOW_MAP_ELEMENT_COUNT
  uniform vec2 _shadowMapElementCount;

  @SHADOW_MAP_PIXEL_SIZE
  uniform float _shadowMapPixelSize;

  @SHADOW_MATRICES
  uniform sampler2D _lightMatrices;

  @SHADOW_MATRICES_COUNT
  uniform float _lightMatricesCount;

  @SHADOW_MAP_TEXTURE
  uniform sampler2D _shadowMapTexture;

  @{default:0.01}
  uniform float shadowBias;

  highp float decodeFloatRGB( vec3 rgb ) {
    return dot( rgb, vec3(1.0, 1./255.0, 1./65025.0) );
  }
#endif

// Define simple shading params

#ifndef BRDF_PARAMS
  #ifdef SIMPLE_SHADING
  #define BRDF_PARAMS simple_params
  struct simple_params{
    vec3 diffuse;
    vec3 specular;
    float shiningness;
  };
  #endif
#endif

// Define pbr params
#ifndef BRDF_PARAMS

#define BRDF_PARAMS pbr_params

struct pbr_params{
    vec3 albedo;
    vec3 f0;
    float roughness;
};
#endif

  float lambert(vec3 lightDirection,vec3 surfaceNormal) {
    return max(0.0, dot(lightDirection, surfaceNormal));
  }

  #ifndef DIFFUSE_BRDF
    #define DIFFUSE_BRDF lambertBRDF

    vec3 lambertBRDF(BRDF_PARAMS param,vec3 i,vec3 o,vec3 n){
      #ifdef SIMPLE_SHADING
        return param.diffuse / PI;
      #endif
      #ifndef SIMPLE_SHADING
        return param.albedo / PI;
      #endif
    }
  #endif

  #ifndef SPECULAR_BRDF
    #ifdef SIMPLE_SHADING
      #define SPECULAR_BRDF blinnPhongBRDF

      vec3 blinnPhongBRDF(BRDF_PARAMS param,vec3 h,vec3 o){
        return param.specular * (param.shiningness + 2.)/(2. * PI) * pow(max(dot(o,h),0.),param.shiningness);
      }
    #endif
  #endif

  #ifndef SPECULAR_BRDF
    #define SPECULAR_BRDF cookTorranceBRDF

    float ctd_GGX_Distribution(BRDF_PARAMS param,vec3 l,vec3 v,vec3 n,vec3 h){
      float alpha2 = pow(param.roughness,4.0);
      float nh2 = pow(dot(n,h),2.0);
      return alpha2/(PI*pow(nh2*(alpha2 - 1.0) + 1.0,2.0));
    }

    float ctg_GGX_SingleGeometryTerm(BRDF_PARAMS param,vec3 n,vec3 v){
      float d = dot(n,v);
      float alpha2 = pow(param.roughness,4.);
      return 2.*d /(d + sqrt(d*d + alpha2*(1. - d*d)));
    }

    vec3 ctf_Schlick(BRDF_PARAMS param,vec3 l,vec3 v,vec3 n,vec3 h){
      vec3 f0 = param.f0;
      float vh = dot(v,n);
      return f0 + pow(1.0-vh,5.0) * (vec3(1.0) - f0);
    }


    vec3 cookTorranceBRDF(BRDF_PARAMS param,vec3 l,vec3 v,vec3 n){
      vec3 h = normalize(l+v);
      return  ctf_Schlick(param,l,v,n,h) * ctd_GGX_Distribution(param,l,v,n,h) * ctg_GGX_SingleGeometryTerm(param,n,l) * ctg_GGX_SingleGeometryTerm(param,n,v)/(4.0 * dot(l,n) * dot(v,n));
    }
  #endif

  #ifndef BRDF
    #ifdef SIMPLE_SHADING
      #define BRDF simpleBRDF

      vec3 simpleBRDF(BRDF_PARAMS param,vec3 i,vec3 o,vec3 n){
        return DIFFUSE_BRDF(param,i,o,n)+ SPECULAR_BRDF(param,reflect(-i,n),o);
      }
    #endif
  #endif

  #ifndef BRDF
    #define BRDF pbrBRDF
    vec3 pbrBRDF(BRDF_PARAMS param,vec3 i,vec3 o,vec3 n){
      return DIFFUSE_BRDF(param,i,o,n) + SPECULAR_BRDF(param,i,o,n);
    }
  #endif
#ifdef USE_DIR_LIGHT

#ifdef USE_SHADOW_MAP

  bool isUVRegion(vec2 uv){
    return all(bvec4(greaterThan(uv,vec2(0,0)),lessThan(uv,vec2(1,1))));
  }

  vec2 correctUV(vec2 uv,float index){
    float i = fract(index / _shadowMapElementCount.x) * _shadowMapElementCount.x;
    float j = (index - i) / _shadowMapElementCount.x;
    return vec2((i + uv.x)/_shadowMapElementCount.x,(j + uv.y)/_shadowMapElementCount.y);
  }

  float shadowCoefficient(vec3 fragPosition,highp mat4 lightMatrix,float index){
    highp vec4 lPos = lightMatrix * vec4(fragPosition,1.0);
    if(any(bvec2(lPos.z/lPos.w > 1.0,lPos.z/lPos.w < -1.0))){
      return 1.0;
    }
    vec2 bUV = lPos.xy / lPos.w / 2.0 + vec2(0.5);
    highp float od = (lPos.z/lPos.w + 1.0)/2.0;
    float fill = 0.0;
    float N = 0.;
    // PCF sampling
    vec2 lUV = bUV;
    if(isUVRegion(lUV)){
      highp float d = decodeFloatRGB(texture2D(_shadowMapTexture,correctUV(lUV,index)).rgb);
      fill += step(shadowBias,od-d);
      N++;
    }
    lUV = bUV + vec2(_shadowMapPixelSize,0);
    if(isUVRegion(lUV)){
      highp float d = decodeFloatRGB(texture2D(_shadowMapTexture,correctUV(lUV,index)).rgb);
      fill += step(shadowBias,od-d);
      N++;
    }
    lUV = bUV + vec2(-_shadowMapPixelSize,0);
    if(isUVRegion(lUV)){
      highp float d = decodeFloatRGB(texture2D(_shadowMapTexture,correctUV(lUV,index)).rgb);
      fill += step(shadowBias,od-d);
      N++;
    }
    lUV = bUV + vec2(0,_shadowMapPixelSize);
    if(isUVRegion(lUV)){
      highp float d = decodeFloatRGB(texture2D(_shadowMapTexture,correctUV(lUV,index)).rgb);
      fill += step(shadowBias,od-d);
      N++;
    }
    lUV = bUV + vec2(0,-_shadowMapPixelSize);
    if(isUVRegion(lUV)){
      highp float d = decodeFloatRGB(texture2D(_shadowMapTexture,correctUV(lUV,index)).rgb);
      fill += step(shadowBias,od-d);
      N++;
    }
    if(N > 4.0){
      return 1.0 - fill/N;
    }
    return 1.0;
  }

  highp vec4 fromLightMatrices(vec2 uv){
    return texture2D(_lightMatrices,uv);
  }

  highp mat4 fetchLightMatrix(float index){
    float y = 1.0 / _lightMatricesCount * (index  + 0.5);
    return mat4(
      fromLightMatrices(vec2(0.125,y)),
      fromLightMatrices(vec2(0.375,y)),
      fromLightMatrices(vec2(0.625,y)),
      fromLightMatrices(vec2(0.875,y))
      );
  }
#endif

  vec3 directionalLight(BRDF_PARAMS param,vec3 fragNormal,vec3 fragPosition){
    vec3 result = vec3(0,0,0);
    for(int i = 0; i < DIR_LIGHT_COUNT;i++){
      vec3 lI = lambert(fragNormal,-_dLightDir[i]) * _dLightColor[i];
      float sc = 1.0;
      #ifdef USE_SHADOW_MAP // Shadowmap Calculations
        if(_dLightParams[i].x >= 0.0){
          highp mat4 lMat = fetchLightMatrix(_dLightParams[i].x);
          sc = shadowCoefficient(fragPosition,lMat,_dLightParams[i].x);
        }
      #endif
      vec3 lColor = sc * lI * BRDF(param,-_dLightDir[i],normalize(_cameraPosition - fragPosition),fragNormal);
      result += lColor;
    }
    return result;
  }
#endif
#ifdef USE_POINT_LIGHT
  vec3 pointLight(BRDF_PARAMS param,vec3 fragNormal,vec3 fragPosition){
    vec3 result = vec3(0,0,0);
    for(int i = 0; i < POINT_LIGHT_COUNT;i++){
      vec3 l2p = _pLightPosition[i] - fragPosition;
      float d = length(l2p);
      vec2 lightParam = _pLightParam[i];
      float atten = max(0.,1.0-d/lightParam.x)/(1.0 + lightParam.y*lightParam.y*d);
      l2p = normalize(l2p);
      vec3 lI = lambert(fragNormal,l2p)* _pLightColor[i] * atten;
      vec3 lColor = lI  * BRDF(param,l2p,normalize(_cameraPosition - fragPosition),fragNormal);
      result += lColor ;
    }
    return result;
  }
#endif
#ifdef USE_SPOT_LIGHT
  vec3 spotLight(BRDF_PARAMS param,vec3 fragNormal,vec3 fragPosition){
    vec3 result = vec3(0);
    for(int i = 0; i < SPOT_LIGHT_COUNT; i++){
      float innerConeAngle = _sLightParam[i].x;
      float outerConeAngle = _sLightParam[i].y;
      float outCos=cos(outerConeAngle);
      float innCos=cos(innerConeAngle);

      vec3 p2l = _sLightPosition[i] - fragPosition;
      float d = length(p2l);
      p2l=p2l/d;
      float c = dot(-p2l,normalize(_sLightDir[i]));
      float decay = _sLightParam[i].z;//減衰係数
      decay = 1.;
      float angleDecay = decay;
      //
      float distDecayCoefficient = 1.0 / (d * d);
      float angleDecayCoefficient = pow(clamp((c-outCos)/(innCos-outCos),0.0,1.0),angleDecay);
      //
      vec3 lI = lambert(p2l,fragNormal)*_sLightColor[i]*angleDecayCoefficient*distDecayCoefficient;
      vec3 lColor = lI * BRDF(param,p2l,normalize(_cameraPosition - fragPosition),fragNormal);
      result += lColor;
    }
    return result;
  }
#endif
  vec3 shading(BRDF_PARAMS params,vec3 fragNormal,vec3 fragPosition){
    vec3 lightingColor = vec3(0);
    #ifdef USE_DIR_LIGHT
    lightingColor.rgb += directionalLight(params,fragNormal,fragPosition);
    #endif
    #ifdef USE_POINT_LIGHT
    lightingColor.rgb += pointLight(params,fragNormal,fragPosition);
    #endif
    #ifdef USE_SPOT_LIGHT
    lightingColor.rgb += spotLight(params,fragNormal,fragPosition);
    #endif
    return lightingColor;
  }
